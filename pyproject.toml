[tool.poetry]
name = "python-django-template"
version = "0.1.0"
description = ""
authors = ["Francis G Goncalves <fguedes13@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
boto3 = "1.34.144"
cachetools = "5.3.3"
celery = "5.4.0"
celery-types = "0.22.0"
colorlog = "6.8.2"
dj-database-url = "2.1.0"
django = "5.0.6"
django-axes = {version = "6.5.1", extras = ["ipware"]}
django-cors-headers = "4.4.0"
django-silk = "5.1.0"
django-split-settings = "1.3.1"
django-storages = "1.14.3"
django-redis = "5.4.0"
djangorestframework = "3.15.2"
djangorestframework-simplejwt = "5.3.1"
drf-spectacular = "0.27.2"
gunicorn = "22.0.0"
pyjwt = "2.8.0"
python-dotenv = "1.0.1"
pytz = "2024.1"
redis = "5.0.7"
sentry-sdk = "2.7.1"
flower = "^2.0.1"
psycopg2-binary = "^2.9.9"

[tool.poetry.group.dev.dependencies]
black = "24.4.0"
mypy = "1.10.1"
pip-check-updates = "0.27.0"
pre-commit = "3.7.1"
pytest = "8.2.2"
pytest-cov = "5.0.0"
pytest-django = "4.8.0"
ruff = "0.4.10"
ruff-lsp = "0.0.54"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
omit = [
    "*/logs/*",
    "*/api/config/*"
    ]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true


[tool.black]
line-length = 88

[tool.ruff]
lint.select = ["ALL"]
lint.unfixable = ["T201"]
lint.ignore = [
    "E501",   # Line too long  # Will be fixed by black
    "A003",
    "RUF001",
    "ERA001",
    "F841",   # Local variable is assigned to but never used

    "ANN101",
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `{name}`

    "D10",

    "D203",
    "D213",
    "EXE002",

    "PD011",
]
show-fixes = true
exclude = [
    "migrations",
    ".venv",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",  # Module imported but unused
]
"tests/**" = [
    "S101",  # Use of assert detected
]

[tool.mypy]
python_version = "3.12"
# ignore_missing_imports_per_module = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
strict = false
implicit_reexport = true
exclude = [
    "venv",
    "migrations",
]

[tool.pytest.ini_options]
minversion = "7.0"
DJANGO_SETTINGS_MODULE = "api.config.settings"
addopts = "--exitfirst -vv --cov --cov-report=html --cov-fail-under=80"
testpaths = [
    "tests",
]
